{"version":3,"sources":["../../../src/providers/facebook.ts"],"names":[],"mappings":"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","file":"facebook.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AuthResponse } from '../models/auth-response';\r\nimport { InitParams } from '../models/init-params';\r\nimport { LoginOptions } from '../models/login-options';\r\nimport { LoginResponse } from '../models/login-response';\r\nimport { LoginStatus } from '../models/login-status';\r\nimport { UIParams } from '../models/ui-params';\r\nimport { UIResponse } from '../models/ui-response';\r\n\r\ndeclare var FB: any;\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport type ApiMethod = 'get' | 'post' | 'delete';\r\n\r\n/**\r\n * @shortdesc\r\n * Angular 2 service to inject to use Facebook's SDK\r\n * @description\r\n * You only need to inject this service in your application if you aren't using [`FacebookModule`](../facebook-module).\r\n * @usage\r\n * ```typescript\r\n * import { FacebookService, InitParams } from 'ng2-facebook-sdk';\r\n *\r\n * constructor(private fb: FacebookService) {\r\n *\r\n *   const params: InitParams = {\r\n *\r\n *   };\r\n *\r\n *   fb.init(params);\r\n *\r\n * }\r\n * ```\r\n */\r\n\r\nexport class FacebookService {\r\n\r\n  /**\r\n   * This method is used to initialize and setup the SDK.\r\n   * @param params {InitParams} Initialization parameters\r\n   * @returns {Promise<any>}\r\n   */\r\n  init(params: InitParams): Promise<any> {\r\n    try {\r\n      return Promise.resolve(FB.init(params));\r\n    } catch (e) {\r\n      return Promise.reject(e);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method lets you make calls to the Graph API\r\n   * @usage\r\n   * ```typescript\r\n   * this.fb.api('somepath')\r\n   *   .then(res => console.log(res))\r\n   *   .catch(e => console.log(e));\r\n   * ```\r\n   * @param path {string} The Graph API endpoint path that you want to call.\r\n   * @param [method=get] {string} The HTTP method that you want to use for the API request.\r\n   * @param [params] {Object} An object consisting of any parameters that you want to pass into your Graph API call.\r\n   * @returns {Promise<any>}\r\n   */\r\n  api(path: string, method: ApiMethod = 'get', params: any = {}): Promise<any> {\r\n    return new Promise<any>((resolve, reject) => {\r\n\r\n      try {\r\n        FB.api(path, method, params, (response: any) => {\r\n          if (!response) {\r\n            reject();\r\n          } else if (response.error) {\r\n            reject(response.error);\r\n          } else {\r\n            resolve(response);\r\n          }\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This method is used to trigger different forms of Facebook created UI dialogs.\r\n   * These dialogs include:\r\n   * - Share dialog\r\n   * - Login dialog\r\n   * - Add page tab dialog\r\n   * - Requests dialog\r\n   * - Send dialog\r\n   * - Payments dialog\r\n   * - Go Live dialog\r\n   * @param params {UIParams} A collection of parameters that control which dialog is loaded, and relevant settings.\r\n   * @returns {Promise<UIResponse>}\r\n   */\r\n  ui(params: UIParams): Promise<UIResponse> {\r\n    return new Promise<any>((resolve, reject) => {\r\n\r\n      try {\r\n        FB.ui(params, (response: any) => {\r\n          if(!response) reject();\r\n          else if(response.error) reject(response.error);\r\n          else resolve(response);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This method allows you to determine if a user is logged in to Facebook and has authenticated your app.\r\n   * @returns {Promise<LoginStatus>}\r\n   */\r\n  getLoginStatus(): Promise<LoginStatus> {\r\n    return new Promise<LoginStatus>((resolve, reject) => {\r\n\r\n      try {\r\n        FB.getLoginStatus((response: LoginStatus) => {\r\n          if (!response) {\r\n            reject();\r\n          } else {\r\n            resolve(response);\r\n          }\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Login the user\r\n   * @usage\r\n   * ```typescript\r\n   * // login without options\r\n   * this.fb.login()\r\n   *   .then((response: LoginResponse) => console.log('Logged in', response))\r\n   *   .catch(e => console.error('Error logging in'));\r\n   *\r\n   * // login with options\r\n   * const options: LoginOptions = {\r\n   *   scope: 'public_profile,user_friends,email,pages_show_list',\r\n   *   return_scopes: true,\r\n   *   enable_profile_selector: true\r\n   * };\r\n   * this.fb.login(options)\r\n   *   .then(...)\r\n   *   .catch(...);\r\n   * ```\r\n   * @param [options] {LoginOptions} Login options\r\n   * @returns {Promise<LoginResponse>} returns a promise that resolves with [LoginResponse](../login-response) object, or rejects with an error\r\n   */\r\n  login(options?: LoginOptions): Promise<LoginResponse> {\r\n    return new Promise<LoginResponse>((resolve, reject) => {\r\n\r\n      try {\r\n        FB.login((response: LoginResponse) => {\r\n          if (response.authResponse) {\r\n            resolve(response);\r\n          }else{\r\n            reject();\r\n          }\r\n        }, options);\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Logout the user\r\n   * @usage\r\n   * ```typescript\r\n   * this.fb.logout().then(() => console.log('Logged out!'));\r\n   * ```\r\n   * @returns {Promise<any>} returns a promise that resolves when the user is logged out\r\n   */\r\n  logout(): Promise<any> {\r\n    return new Promise<any>((resolve, reject) => {\r\n\r\n      try {\r\n        FB.logout((response: any) => {\r\n          resolve(response);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This synchronous function returns back the current authResponse.\r\n   * @usage\r\n   * ```typescript\r\n   * import { AuthResponse, FacebookService } from 'ng2-facebook-sdk';\r\n   *\r\n   * ...\r\n   *\r\n   * const authResponse: AuthResponse = this.fb.getAuthResponse();\r\n   * ```\r\n   * @returns {AuthResponse} returns an [AuthResponse](../auth-response) object\r\n   */\r\n  getAuthResponse(): AuthResponse {\r\n    try {\r\n      return <AuthResponse>FB.getAuthResponse();\r\n    } catch (e) {\r\n      console.error('ng2-facebook-sdk: ', e);\r\n    }\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}