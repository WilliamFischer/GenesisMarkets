{"version":3,"sources":["../../../../src/components/fb-comments/fb-comments.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,SAAA,EAAW,KAAA,EAAO,UAAA,EAAY,QAAA,EAAS,MAAO,eAAA,CAAgB;AACvE,OAAO,EAAE,aAAA,EAAe,aAAA,EAAc,MAAO,mBAAA,CAAoB;AAEjE;;;;;;;;;;;;;GAaG;AAEH;IAAyC,uCAAa;IAkDpD,6BACE,EAAc,EACd,GAAa;QAFf,YAIE,kBAAM,EAAE,EAAE,GAAG,EAAE,aAAa,CAAC,SAC9B;QA9CD;;;;WAIG;QAGH,UAAI,GAAW,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;;IAuCpC,CAAC;IAqBH,0BAAC;AAAD,CA5EA,AA4EC,CA5EwC,aAAa;;AAyD/C,8BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,aAAa;gBACvB,QAAQ,EAAE,EAAE;aACb,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,kCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;CACjB,EAH6F,CAG7F,CAAC;AACK,kCAAc,GAA2C;IAChE,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACjC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC1B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC9B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;CAC1B,CAAC;AApEA;IADC,aAAa;;wDACM;AASpB;IADC,aAAa;;iDACsB;AAOpC;IADC,aAAa;;mDACE;AAOhB;IADC,aAAa;;qDACG;AAOjB;IADC,aAAa;;oDACE;AAWhB;IADC,aAAa;;kDACA","file":"fb-comments.js","sourceRoot":"","sourcesContent":["import { Component, Input, ElementRef, Renderer } from '@angular/core';\r\nimport { FBMLAttribute, FBMLComponent } from '../fbml-component';\r\n\r\n/**\r\n * @name Comments\r\n * @shortdesc Comments component\r\n * @fbdoc https://developers.facebook.com/docs/plugins/comments\r\n * @description\r\n * The comments plugin lets people comment on content on your site using their Facebook account.\r\n * People can choose to share their comment activity with their friends (and friends of their friends) on Facebook as well.\r\n * The comments plugin also includes built-in moderation tools and social relevance ranking.\r\n *\r\n * @usage\r\n * ```html\r\n * <fb-comments></fb-comments>\r\n * ```\r\n */\r\n\r\nexport class FBCommentsComponent extends FBMLComponent {\r\n\r\n  /**\r\n   * The color scheme used by the comments plugin. Can be `light` or `dark`. Defaults to `light`.\r\n   */\r\n  \r\n  @FBMLAttribute\r\n  colorscheme: string;\r\n\r\n  /**\r\n   * The absolute URL that comments posted in the plugin will be permanently associated with.\r\n   * All stories shared on Facebook about comments posted using the comments plugin will link to this URL.\r\n   * Defaults to current URL.\r\n   */\r\n  \r\n  @FBMLAttribute\r\n  href: string = window.location.href;\r\n\r\n  /**\r\n   * A boolean value that specifies whether to show the mobile-optimized version or not. If no value is given, it will be automatically detected.\r\n   */\r\n  \r\n  @FBMLAttribute\r\n  mobile: boolean;\r\n\r\n  /**\r\n   * The number of comments to show by default. The minimum value is `1`. Defaults to `10`.\r\n   */\r\n  \r\n  @FBMLAttribute\r\n  numposts: number;\r\n\r\n  /**\r\n   * The order to use when displaying comments. Can be `social`, `reverse_time`, or `time`. The different order types are explained [in the FAQ](https://developers.facebook.com/docs/plugins/comments#faqorder). Defaults to `social`\r\n   */\r\n  \r\n  @FBMLAttribute\r\n  orderBy: string;\r\n\r\n  /**\r\n   * The width of the comments plugin on the webpage.\r\n   * This can be either a pixel value or a percentage (such as 100%) for fluid width.\r\n   * The mobile version of the comments plugin ignores the width parameter and instead has a fluid width of 100%.\r\n   * The minimum width supported by the comments plugin is 320px.\r\n   * Defaults to `550px`.\r\n   */\r\n  \r\n  @FBMLAttribute\r\n  width: string;\r\n\r\n  constructor(\r\n    el: ElementRef,\r\n    rnd: Renderer\r\n  ) {\r\n    super(el, rnd, 'fb-comments');\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'fb-comments',\r\n  template: ''\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'colorscheme': [{ type: Input },],\n'href': [{ type: Input },],\n'mobile': [{ type: Input },],\n'numposts': [{ type: Input },],\n'orderBy': [{ type: Input },],\n'width': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}